{"version":3,"sources":["features/notes/notesSlice.js","features/notes/Note.js","features/notes/SubmitNote.js","features/notes/Notes.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetchNotes","createAsyncThunk","a","fetch","method","headers","then","res","json","response","notesAdapter","createEntityAdapter","selectId","note","id","emptyState","getInitialState","filledState","upsertMany","notesSlice","createSlice","name","initialState","reducers","setAllNotes","setAll","notesAddOne","addOne","notesAddMany","addMany","notesUpdate","updateOne","notesRemove","removeOne","extraReducers","fulfilled","state","action","payload","actions","getSelectors","notes","selectAllNotes","selectAll","getLastNoteID","selectById","selectIds","selectTotal","length","Note","title","description","useState","isEditing","toggleEditing","editable_title","editTitle","editable_description","editDescription","description_ref","useRef","dispatch","useDispatch","useEffect","current","style","height","scrollHeight","className","type","value","placeholder","onChange","e","target","ref","onClick","changes","body","JSON","stringify","console","log","SubmitNote","setTitle","setDescription","next_id","useSelector","onSubmit","preventDefault","disabled","NoteListEmpty","NoteList","map","idx","key","Notes","App","configureStore","reducer","notesReducer","Boolean","window","location","hostname","match","store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b2bdf4f.chunk.js","sourcesContent":["import {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from \"@reduxjs/toolkit\";\n\nexport const fetchNotes = createAsyncThunk(\"notes/fetchAll\", async () => {\n  const response = await fetch(\"api/notes\", {\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n  }).then((res) => res.json());\n  return response;\n});\n\nexport const notesAdapter = createEntityAdapter({\n  selectId: (note) => note.id,\n});\n\nconst emptyState = notesAdapter.getInitialState();\n\nconst filledState = notesAdapter.upsertMany(emptyState, []);\n\nexport const notesSlice = createSlice({\n  name: \"notes\",\n  initialState: filledState,\n  reducers: {\n    setAllNotes: notesAdapter.setAll,\n    notesAddOne: notesAdapter.addOne,\n    notesAddMany: notesAdapter.addMany,\n    notesUpdate: notesAdapter.updateOne,\n    notesRemove: notesAdapter.removeOne,\n  },\n  extraReducers: {\n    [fetchNotes.fulfilled]: (state, action) => {\n      notesAdapter.setAll(state, action.payload);\n    },\n  },\n});\n\n// actions\nexport const {\n  setAllNotes,\n  notesAddOne,\n  notesAddMany,\n  notesUpdate,\n  notesRemove,\n} = notesSlice.actions;\n\n// selectors\nexport const {\n  selectAll: selectAllNotes,\n  selectById: selectNoteById,\n  selectIds: selectNoteIds,\n  selectTotal: selectTotalNotes,\n  // Pass in a selector that returns the posts slice of state\n} = notesAdapter.getSelectors((state) => state.notes);\n\nexport const getLastNoteID = (state) => {\n  const notes = selectAllNotes(state);\n\n  return notes[notes.length - 1]?.id ?? -1;\n};\n\nexport default notesSlice.reducer;\n","import { useEffect, useRef, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { notesRemove, notesUpdate } from \"./notesSlice\";\n\nimport \"./Note.css\";\n\nconst Note = ({ id, title, description }) => {\n  const [isEditing, toggleEditing] = useState(false);\n  const [editable_title, editTitle] = useState(title);\n  const [editable_description, editDescription] = useState(description);\n\n  const description_ref = useRef(0);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // to expand height on mount\n    description_ref.current.style.height = `${description_ref.current.scrollHeight}px`;\n  });\n\n  const handleTitle = (e) => {\n    toggleEditing(true);\n    editTitle(e.target.value);\n  };\n\n  const handleDescription = (e) => {\n    toggleEditing(true);\n    e.target.style.height = \"inherit\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n\n    editDescription(e.target.value);\n  };\n\n  const handleSave = () => {\n    toggleEditing(false);\n\n    dispatch(\n      notesUpdate({\n        id,\n        changes: {\n          title: editable_title,\n          description: editable_description,\n        },\n      })\n    );\n    fetch(`api/notes/${id}/update`, {\n      method: \"PATCH\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        title: editable_title,\n        description: editable_description,\n      }),\n    });\n  };\n\n  const handleDelete = () => {\n    console.log(id);\n\n    dispatch(notesRemove(id));\n\n    fetch(`api/notes/${id}/delete`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    });\n  };\n\n  return (\n    <div className=\"note mb-3 shadow\">\n      <div className=\"note--container\">\n        <h5 className=\"note__title\" id={id}>\n          <input\n            type=\"text\"\n            name=\"title\"\n            className={\n              isEditing ? \"note__title__input--editing\" : \"note__title__input\"\n            }\n            value={isEditing ? editable_title : title}\n            placeholder=\"Название заметки\"\n            onChange={handleTitle}\n          />\n        </h5>\n        <textarea\n          className={\n            isEditing ? \"note__description--editing\" : \"note__description\"\n          }\n          value={isEditing ? editable_description : description}\n          onChange={handleDescription}\n          placeholder=\"Текст заметки\"\n          ref={description_ref}\n        />\n        <div className=\"note__actions--wrapper px-1\">\n          <div className=\"note__actions d-inline clearfix\">\n            {isEditing && (\n              <div\n                className=\"note__action__save float-start p-1\"\n                onClick={handleSave}\n              >\n                <i className=\"far fa-save\"></i>\n              </div>\n            )}\n            <div\n              className=\"note__action__delete float-end p-1\"\n              onClick={handleDelete}\n            >\n              <i className=\"far fa-trash-alt \"></i>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Note;\n","import { useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getLastNoteID, notesAddOne } from \"./notesSlice\";\nimport \"./SubmitNote.css\";\n\nconst SubmitNote = () => {\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const dispatch = useDispatch();\n  const next_id = useSelector(getLastNoteID) + 1;\n  const description_ref = useRef(0)\n\n  const handleTitle = (e) => {\n    setTitle(e.target.value);\n  };\n\n  const handleDescription = (e) => {\n    // resize textarea\n    e.target.style.height = \"inherit\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n\n    setDescription(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    dispatch(notesAddOne({ id: next_id, title, description }));\n    fetch(\"api/notes/add\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ id: next_id, title, description }),\n    })\n\n    // clear fields\n    setTitle(\"\");\n    setDescription(\"\");\n    description_ref.current.style.height = \"inherit\"\n  };\n\n  return (\n    <form className=\"note mb-3 shadow\" onSubmit={handleSubmit}>\n      <div className=\"submit-note--wrapper\">\n        <h5 className=\"submit-note_title\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            className=\"submit-note__title--input\"\n            value={title}\n            placeholder=\"Заголовок\"\n            onChange={handleTitle}\n          />\n        </h5>\n        <textarea\n          className=\"submit-note__text\"\n          value={description}\n          onChange={handleDescription}\n          placeholder=\"Заметка\"\n          ref={description_ref}\n        />\n        <div className=\"submit-note_actions--wrapper px-1\">\n          <div className=\"submit-note_actions d-inline clearfix\">\n            <div className=\"submit-note__action__submit float-end pt-2\">\n              <button\n                type=\"submit\"\n                className=\"btn submit__button\"\n                disabled={!(title || description)}\n              >\n                <i className=\"fas fa-plus-circle\"></i> Сохранить\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default SubmitNote;\n","import { useSelector } from \"react-redux\";\nimport { selectAllNotes } from \"./notesSlice\";\nimport Note from \"./Note\";\nimport SubmitNote from \"./SubmitNote\";\n\nconst NoteListEmpty = () => {\n  return (\n    <h5 className=\"notes__list--empty\">\n      Пока заметок нет <i className=\"far fa-sad-tear\"></i>\n    </h5>\n  );\n};\n\nconst NoteList = ({ notes }) => {\n  return (\n    <div className=\"notes__list\">\n      {notes && notes.map((note, idx) => <Note {...note} key={idx} />)}\n    </div>\n  );\n};\n\nconst Notes = () => {\n  const notes = useSelector(selectAllNotes);\n\n  return (\n    <div className=\"notes\">\n      <SubmitNote />\n      {notes.length ? <NoteList notes={notes} /> : <NoteListEmpty />}\n    </div>\n  );\n};\n\nexport default Notes;\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Notes from \"./features/notes/Notes\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App container-md\">\r\n      <div className=\"my-3 mx-auto\">\r\n        <Notes />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport notesReducer from '../features/notes/notesSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    notes: notesReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { fetchNotes } from './features/notes/notesSlice';\r\n\r\n// fetch notes before rendering\r\nstore.dispatch(fetchNotes());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}